diff --git a/BUILD.gn b/BUILD.gn
index 571049f3e4..21a90ff4a8 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -272,7 +272,15 @@ config("rtc_prod_config") {
 config("common_config") {
   cflags = []
   cflags_c = []
-  cflags_cc = []
+  cflags_cc = [
+    "/std:c++20",
+    "/wd4715",  # not all control paths return a value
+    "/wd4068",  # unknown pragma 'clang'
+    "/wd4267",  # conversion from 'size_t' to 'int', possible loss of data
+    "/wd4312",  # 'reinterpret_cast': conversion from 'rtc::PlatformThreadRef' to 'const void *' of greater size
+    "/wd4090",  # 'function': different 'volatile' qualifiers
+    "/wd4838"   # conversion from 'const double' to 'const ValueType &' requires a narrowing conversion
+  ]
   cflags_objc = []
   defines = []
 
diff --git a/api/test/metrics/metrics_logger.cc b/api/test/metrics/metrics_logger.cc
index 1e24400367..2fb00aa66b 100644
--- a/api/test/metrics/metrics_logger.cc
+++ b/api/test/metrics/metrics_logger.cc
@@ -43,17 +43,49 @@ void DefaultMetricsLogger::LogSingleValueMetric(
     ImprovementDirection improvement_direction,
     std::map<std::string, std::string> metadata) {
   MutexLock lock(&mutex_);
-  metrics_.push_back(Metric{
-      .name = std::string(name),
-      .unit = unit,
-      .improvement_direction = improvement_direction,
-      .test_case = std::string(test_case_name),
-      .metric_metadata = std::move(metadata),
-      .time_series =
-          Metric::TimeSeries{.samples = std::vector{Metric::TimeSeries::Sample{
-                                 .timestamp = Now(), .value = value}}},
-      .stats = Metric::Stats{
-          .mean = value, .stddev = absl::nullopt, .min = value, .max = value}});
+
+  //  fatal error C1001: Internal compiler error.
+  //(compiler file 'D:\a\_work\1\s\src\vctools\Compiler\Utc\src\p2\main.c', line 234)
+  // To work around this problem, try simplifying or changing the program near the locations listed above.
+  //If possible please provide a repro here: https://developercommunity.visualstudio.com
+  //Please choose the Technical Support command on the Visual C++
+  // Help menu, or open the Technical Support help file for more information
+  //  cl!RaiseException()+0x6c
+  //  cl!RaiseException()+0x6c
+  //  cl!InvokeCompilerPassW()+0x8a967
+  //  cl!InvokeCompilerPassW()+0xe20d1
+
+  //metrics_.push_back(Metric{
+  //  .name = std::string(name),
+  //  .unit = unit,
+  //  .improvement_direction = improvement_direction,
+  //  .test_case = std::string(test_case_name),
+  //  .metric_metadata = std::move(metadata),
+  //  .time_series =
+  //      Metric::TimeSeries{.samples = std::vector{Metric::TimeSeries::Sample{
+  //                             .timestamp = Now(), .value = value}}},
+  //  .stats = Metric::Stats{
+  //      .mean = value, .stddev = absl::nullopt, .min = value, .max = value}});
+  
+  Metric metric;
+  metric.name = std::string(name);
+  metric.unit = unit;
+  metric.improvement_direction = improvement_direction;
+  metric.test_case = std::string(test_case_name);
+  metric.metric_metadata = std::move(metadata);
+  Metric::TimeSeries::Sample time_sample{/* .timestamp = */ Now(),
+                                         /* .value = */ value};
+  auto time_samples = std::vector<Metric::TimeSeries::Sample>{time_sample};
+  Metric::TimeSeries time_series;
+  time_series.samples = time_samples;
+  metric.time_series = time_series;
+  Metric::Stats stats;
+  stats.mean = value;
+  stats.stddev = absl::nullopt;
+  stats.min = value;
+  stats.max = value;
+  metric.stats = stats;
+  metrics_.push_back(metric);
 }
 
 void DefaultMetricsLogger::LogMetric(
diff --git a/modules/audio_device/win/audio_device_core_win.cc b/modules/audio_device/win/audio_device_core_win.cc
index aa8b6a9ebe..1540b6acc8 100644
--- a/modules/audio_device/win/audio_device_core_win.cc
+++ b/modules/audio_device/win/audio_device_core_win.cc
@@ -803,6 +803,7 @@ int32_t AudioDeviceWindowsCore::SpeakerVolumeIsAvailable(bool& available) {
   HRESULT hr = S_OK;
   IAudioSessionManager* pManager = NULL;
   ISimpleAudioVolume* pVolume = NULL;
+  float volume(0.0f);
 
   hr = _ptrDeviceOut->Activate(__uuidof(IAudioSessionManager), CLSCTX_ALL, NULL,
                                (void**)&pManager);
@@ -811,7 +812,6 @@ int32_t AudioDeviceWindowsCore::SpeakerVolumeIsAvailable(bool& available) {
   hr = pManager->GetSimpleAudioVolume(NULL, FALSE, &pVolume);
   EXIT_ON_ERROR(hr);
 
-  float volume(0.0f);
   hr = pVolume->GetMasterVolume(&volume);
   if (FAILED(hr)) {
     available = false;
@@ -949,13 +949,13 @@ int32_t AudioDeviceWindowsCore::SpeakerMuteIsAvailable(bool& available) {
 
   HRESULT hr = S_OK;
   IAudioEndpointVolume* pVolume = NULL;
+  BOOL mute;
 
   // Query the speaker system mute state.
   hr = _ptrDeviceOut->Activate(__uuidof(IAudioEndpointVolume), CLSCTX_ALL, NULL,
                                reinterpret_cast<void**>(&pVolume));
   EXIT_ON_ERROR(hr);
 
-  BOOL mute;
   hr = pVolume->GetMute(&mute);
   if (FAILED(hr))
     available = false;
@@ -989,13 +989,13 @@ int32_t AudioDeviceWindowsCore::SetSpeakerMute(bool enable) {
 
   HRESULT hr = S_OK;
   IAudioEndpointVolume* pVolume = NULL;
+  const BOOL mute(enable);
 
   // Set the speaker system mute state.
   hr = _ptrDeviceOut->Activate(__uuidof(IAudioEndpointVolume), CLSCTX_ALL, NULL,
                                reinterpret_cast<void**>(&pVolume));
   EXIT_ON_ERROR(hr);
 
-  const BOOL mute(enable);
   hr = pVolume->SetMute(mute, NULL);
   EXIT_ON_ERROR(hr);
 
@@ -1024,13 +1024,13 @@ int32_t AudioDeviceWindowsCore::SpeakerMute(bool& enabled) const {
 
   HRESULT hr = S_OK;
   IAudioEndpointVolume* pVolume = NULL;
+  BOOL mute;
 
   // Query the speaker system mute state.
   hr = _ptrDeviceOut->Activate(__uuidof(IAudioEndpointVolume), CLSCTX_ALL, NULL,
                                reinterpret_cast<void**>(&pVolume));
   EXIT_ON_ERROR(hr);
 
-  BOOL mute;
   hr = pVolume->GetMute(&mute);
   EXIT_ON_ERROR(hr);
 
@@ -1059,13 +1059,13 @@ int32_t AudioDeviceWindowsCore::MicrophoneMuteIsAvailable(bool& available) {
 
   HRESULT hr = S_OK;
   IAudioEndpointVolume* pVolume = NULL;
+  BOOL mute;
 
   // Query the microphone system mute state.
   hr = _ptrDeviceIn->Activate(__uuidof(IAudioEndpointVolume), CLSCTX_ALL, NULL,
                               reinterpret_cast<void**>(&pVolume));
   EXIT_ON_ERROR(hr);
 
-  BOOL mute;
   hr = pVolume->GetMute(&mute);
   if (FAILED(hr))
     available = false;
@@ -1096,13 +1096,13 @@ int32_t AudioDeviceWindowsCore::SetMicrophoneMute(bool enable) {
 
   HRESULT hr = S_OK;
   IAudioEndpointVolume* pVolume = NULL;
+  const BOOL mute(enable);
 
   // Set the microphone system mute state.
   hr = _ptrDeviceIn->Activate(__uuidof(IAudioEndpointVolume), CLSCTX_ALL, NULL,
                               reinterpret_cast<void**>(&pVolume));
   EXIT_ON_ERROR(hr);
 
-  const BOOL mute(enable);
   hr = pVolume->SetMute(mute, NULL);
   EXIT_ON_ERROR(hr);
 
@@ -1126,13 +1126,13 @@ int32_t AudioDeviceWindowsCore::MicrophoneMute(bool& enabled) const {
 
   HRESULT hr = S_OK;
   IAudioEndpointVolume* pVolume = NULL;
+  BOOL mute;
 
   // Query the microphone system mute state.
   hr = _ptrDeviceIn->Activate(__uuidof(IAudioEndpointVolume), CLSCTX_ALL, NULL,
                               reinterpret_cast<void**>(&pVolume));
   EXIT_ON_ERROR(hr);
 
-  BOOL mute;
   hr = pVolume->GetMute(&mute);
   EXIT_ON_ERROR(hr);
 
@@ -1244,12 +1244,12 @@ int32_t AudioDeviceWindowsCore::MicrophoneVolumeIsAvailable(bool& available) {
 
   HRESULT hr = S_OK;
   IAudioEndpointVolume* pVolume = NULL;
+  float volume(0.0f);
 
   hr = _ptrDeviceIn->Activate(__uuidof(IAudioEndpointVolume), CLSCTX_ALL, NULL,
                               reinterpret_cast<void**>(&pVolume));
   EXIT_ON_ERROR(hr);
 
-  float volume(0.0f);
   hr = pVolume->GetMasterVolumeLevelScalar(&volume);
   if (FAILED(hr)) {
     available = false;
@@ -1836,6 +1836,10 @@ int32_t AudioDeviceWindowsCore::InitPlayout() {
   WAVEFORMATEX* pWfxOut = NULL;
   WAVEFORMATEX Wfx = WAVEFORMATEX();
   WAVEFORMATEX* pWfxClosestMatch = NULL;
+  const int freqs[] = {48000, 44100, 16000, 96000, 32000, 8000};
+  REFERENCE_TIME hnsBufferDuration =
+      0;  // ask for minimum buffer size (default)
+  UINT bufferFrameCount(0);
 
   // Create COM object with IAudioClient interface.
   SAFE_RELEASE(_ptrClientOut);
@@ -1870,7 +1874,6 @@ int32_t AudioDeviceWindowsCore::InitPlayout() {
   Wfx.wBitsPerSample = 16;
   Wfx.cbSize = 0;
 
-  const int freqs[] = {48000, 44100, 16000, 96000, 32000, 8000};
   hr = S_FALSE;
 
   // Iterate over frequencies and channels, in order of priority
@@ -1956,8 +1959,6 @@ int32_t AudioDeviceWindowsCore::InitPlayout() {
   // buffer.
   // ****************************************************************************
   //
-  REFERENCE_TIME hnsBufferDuration =
-      0;  // ask for minimum buffer size (default)
   if (_devicePlaySampleRate == 44100) {
     // Ask for a larger buffer size (30ms) when using 44.1kHz as render rate.
     // There seems to be a larger risk of underruns for 44.1 compared
@@ -1997,7 +1998,6 @@ int32_t AudioDeviceWindowsCore::InitPlayout() {
 
   // Get the actual size of the shared (endpoint buffer).
   // Typical value is 960 audio frames <=> 20ms @ 48kHz sample rate.
-  UINT bufferFrameCount(0);
   hr = _ptrClientOut->GetBufferSize(&bufferFrameCount);
   if (SUCCEEDED(hr)) {
     RTC_LOG(LS_VERBOSE) << "IAudioClient::GetBufferSize() => "
@@ -2153,6 +2153,8 @@ int32_t AudioDeviceWindowsCore::InitRecording() {
   WAVEFORMATEX* pWfxIn = NULL;
   WAVEFORMATEXTENSIBLE Wfx = WAVEFORMATEXTENSIBLE();
   WAVEFORMATEX* pWfxClosestMatch = NULL;
+  const int freqs[6] = {48000, 44100, 16000, 96000, 32000, 8000};
+  UINT bufferFrameCount(0);
 
   // Create COM object with IAudioClient interface.
   SAFE_RELEASE(_ptrClientIn);
@@ -2190,7 +2192,6 @@ int32_t AudioDeviceWindowsCore::InitRecording() {
   Wfx.Samples.wValidBitsPerSample = Wfx.Format.wBitsPerSample;
   Wfx.SubFormat = KSDATAFORMAT_SUBTYPE_PCM;
 
-  const int freqs[6] = {48000, 44100, 16000, 96000, 32000, 8000};
   hr = S_FALSE;
 
   // Iterate over frequencies and channels, in order of priority
@@ -2287,7 +2288,6 @@ int32_t AudioDeviceWindowsCore::InitRecording() {
 
   // Get the actual size of the shared (endpoint buffer).
   // Typical value is 960 audio frames <=> 20ms @ 48kHz sample rate.
-  UINT bufferFrameCount(0);
   hr = _ptrClientIn->GetBufferSize(&bufferFrameCount);
   if (SUCCEEDED(hr)) {
     RTC_LOG(LS_VERBOSE) << "IAudioClient::GetBufferSize() => "
@@ -2686,6 +2686,11 @@ DWORD AudioDeviceWindowsCore::DoRenderThread() {
   _Lock();
 
   IAudioClock* clock = NULL;
+  REFERENCE_TIME devPeriod = 0;
+  REFERENCE_TIME devPeriodMin = 0;
+  int playout_delay = 0;
+  double endpointBufferSizeMS = 0.0;
+  BYTE* pData = NULL;
 
   // Get size of rendering buffer (length is expressed as the number of audio
   // frames the buffer can hold). This value is fixed during the rendering
@@ -2714,8 +2719,6 @@ DWORD AudioDeviceWindowsCore::DoRenderThread() {
   // an audio application can achieve. Typical value: 100000 <=> 0.01 sec =
   // 10ms.
   //
-  REFERENCE_TIME devPeriod = 0;
-  REFERENCE_TIME devPeriodMin = 0;
   _ptrClientOut->GetDevicePeriod(&devPeriod, &devPeriodMin);
   RTC_LOG(LS_VERBOSE) << "[REND] device period        : " << (DWORD)devPeriod
                       << " (" << (double)(devPeriod / 10000.0) << " ms)";
@@ -2723,20 +2726,19 @@ DWORD AudioDeviceWindowsCore::DoRenderThread() {
   // Derive initial rendering delay.
   // Example: 10*(960/480) + 15 = 20 + 15 = 35ms
   //
-  int playout_delay = 10 * (bufferLength / _playBlockSize) +
+  playout_delay = 10 * (bufferLength / _playBlockSize) +
                       (int)((latency + devPeriod) / 10000);
   _sndCardPlayDelay = playout_delay;
   _writtenSamples = 0;
   RTC_LOG(LS_VERBOSE) << "[REND] initial delay        : " << playout_delay;
 
-  double endpointBufferSizeMS =
+  endpointBufferSizeMS =
       10.0 * ((double)bufferLength / (double)_devicePlayBlockSize);
   RTC_LOG(LS_VERBOSE) << "[REND] endpointBufferSizeMS : "
                       << endpointBufferSizeMS;
 
   // Before starting the stream, fill the rendering buffer with silence.
   //
-  BYTE* pData = NULL;
   hr = _ptrRenderClient->GetBuffer(bufferLength, &pData);
   EXIT_ON_ERROR(hr);
 
@@ -3090,6 +3092,11 @@ DWORD AudioDeviceWindowsCore::DoCaptureThread() {
 
   BYTE* syncBuffer = NULL;
   UINT32 syncBufIndex = 0;
+  UINT32 syncBufferSize = 0;
+  REFERENCE_TIME devPeriod = 0;
+  REFERENCE_TIME devPeriodMin = 0;
+  double extraDelayMS = 0.0;
+  double endpointBufferSizeMS = 0.0;
 
   _readSamples = 0;
 
@@ -3125,7 +3132,7 @@ DWORD AudioDeviceWindowsCore::DoCaptureThread() {
   // It is used for compensation between native 44.1 and internal 44.0 and
   // for cases when the capture buffer is larger than 10ms.
   //
-  const UINT32 syncBufferSize = 2 * (bufferLength * _recAudioFrameSize);
+  syncBufferSize = 2 * (bufferLength * _recAudioFrameSize);
   syncBuffer = new BYTE[syncBufferSize];
   if (syncBuffer == NULL) {
     return (DWORD)E_POINTER;
@@ -3144,16 +3151,14 @@ DWORD AudioDeviceWindowsCore::DoCaptureThread() {
   // Get the length of the periodic interval separating successive processing
   // passes by the audio engine on the data in the endpoint buffer.
   //
-  REFERENCE_TIME devPeriod = 0;
-  REFERENCE_TIME devPeriodMin = 0;
   _ptrClientIn->GetDevicePeriod(&devPeriod, &devPeriodMin);
   RTC_LOG(LS_VERBOSE) << "[CAPT] device period        : " << (DWORD)devPeriod
                       << " (" << (double)(devPeriod / 10000.0) << " ms)";
 
-  double extraDelayMS = (double)((latency + devPeriod) / 10000.0);
+  extraDelayMS = (double)((latency + devPeriod) / 10000.0);
   RTC_LOG(LS_VERBOSE) << "[CAPT] extraDelayMS         : " << extraDelayMS;
 
-  double endpointBufferSizeMS =
+  endpointBufferSizeMS =
       10.0 * ((double)bufferLength / (double)_recBlockSize);
   RTC_LOG(LS_VERBOSE) << "[CAPT] endpointBufferSizeMS : "
                       << endpointBufferSizeMS;
@@ -3967,6 +3972,9 @@ int32_t AudioDeviceWindowsCore::_EnumerateEndpointDevicesAll(
   IPropertyStore* pProps = NULL;
   IAudioEndpointVolume* pEndpointVolume = NULL;
   LPWSTR pwszID = NULL;
+  UINT count = 0;
+  UINT nChannelCount(0);
+  DWORD dwHwSupportMask = 0;
 
   // Generate a collection of audio endpoint devices in the system.
   // Get states for *all* endpoint devices.
@@ -3980,8 +3988,6 @@ int32_t AudioDeviceWindowsCore::_EnumerateEndpointDevicesAll(
 
   // use the IMMDeviceCollection interface...
 
-  UINT count = 0;
-
   // Retrieve a count of the devices in the device collection.
   hr = pCollection->GetCount(&count);
   EXIT_ON_ERROR(hr);
@@ -4048,7 +4054,6 @@ int32_t AudioDeviceWindowsCore::_EnumerateEndpointDevicesAll(
                           << ")  : UNPLUGGED";
 
     // Check the hardware volume capabilities.
-    DWORD dwHwSupportMask = 0;
     hr = pEndpoint->Activate(__uuidof(IAudioEndpointVolume), CLSCTX_ALL, NULL,
                              (void**)&pEndpointVolume);
     CONTINUE_ON_ERROR(hr);
@@ -4069,7 +4074,6 @@ int32_t AudioDeviceWindowsCore::_EnumerateEndpointDevicesAll(
 
     // Check the channel count (#channels in the audio stream that enters or
     // leaves the audio endpoint device)
-    UINT nChannelCount(0);
     hr = pEndpointVolume->GetChannelCount(&nChannelCount);
     CONTINUE_ON_ERROR(hr);
     RTC_LOG(LS_VERBOSE) << "#channels    : " << nChannelCount;
diff --git a/modules/audio_processing/aec3/matched_filter_avx2.cc b/modules/audio_processing/aec3/matched_filter_avx2.cc
index 8c2ffcbd1e..7cc04123d3 100644
--- a/modules/audio_processing/aec3/matched_filter_avx2.cc
+++ b/modules/audio_processing/aec3/matched_filter_avx2.cc
@@ -81,14 +81,14 @@ void MatchedFilterCore_AccumulatedError_AVX2(
       s_inst_256_8 = _mm256_mul_ps(h_k_8, x_k_8);
       s_inst_hadd_256 = _mm256_hadd_ps(s_inst_256, s_inst_256_8);
       s_inst_hadd_256 = _mm256_hadd_ps(s_inst_hadd_256, s_inst_hadd_256);
-      s_acum += s_inst_hadd_256[0];
-      e_128[0] = s_acum - y[i];
-      s_acum += s_inst_hadd_256[4];
-      e_128[1] = s_acum - y[i];
-      s_acum += s_inst_hadd_256[1];
-      e_128[2] = s_acum - y[i];
-      s_acum += s_inst_hadd_256[5];
-      e_128[3] = s_acum - y[i];
+      s_acum += s_inst_hadd_256.m256_f32[0];
+      e_128.m128_f32[0] = s_acum - y[i];
+      s_acum += s_inst_hadd_256.m256_f32[4];
+      e_128.m128_f32[1] = s_acum - y[i];
+      s_acum += s_inst_hadd_256.m256_f32[1];
+      e_128.m128_f32[2] = s_acum - y[i];
+      s_acum += s_inst_hadd_256.m256_f32[5];
+      e_128.m128_f32[3] = s_acum - y[i];
 
       __m128 accumulated_error = _mm_load_ps(a_p);
       accumulated_error = _mm_fmadd_ps(e_128, e_128, accumulated_error);
@@ -209,8 +209,8 @@ void MatchedFilterCore_AVX2(size_t x_start_index,
     x2_sum_256 = _mm256_add_ps(x2_sum_256, x2_sum_256_8);
     s_256 = _mm256_add_ps(s_256, s_256_8);
     __m128 sum = hsum_ab(x2_sum_256, s_256);
-    x2_sum += sum[0];
-    s += sum[1];
+    x2_sum += sum.m128_f32[0];
+    s += sum.m128_f32[1];
 
     // Compute the matched filter error.
     float e = y[i] - s;
